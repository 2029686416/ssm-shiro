<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
           http://www.springframework.org/schema/context  
           http://www.springframework.org/schema/context/spring-context-4.0.xsd
           http://www.springframework.org/schema/aop 
           http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
           http://www.springframework.org/schema/task 
           http://www.springframework.org/schema/task/spring-task-4.0.xsd
           http://www.springframework.org/schema/tx 
           http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">
	 <!-- shiro -->
	 <!-- shiro的核心配置:  配置shiroFileter id名必须与web.xml中的filtername保持一致 -->
     <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
          <property name="securityManager" ref="securityManager" />
          <!-- value可接页面和方法 -->
          <property name="loginUrl" value="/login" />
          <property name="successUrl" value="/index" />
          <property name="unauthorizedUrl" value="/unauthorized" />
          <property name="filterChainDefinitions">
               <value>
               		/login = anon
               		/shiro/login = anon
               		/other/testInter = anon
               		<!-- 配置权限 -->
               	    /user = roles[user]
                    /admin = roles[admin]
               		<!-- 其他的请求都需要被认证后可访问 -->
               		/yy = anon
               		/static/** = anon
                    /** = authc
               </value>
          </property>
     </bean>
 	<!-- 用户授权信息Cache, 采用EhCache -->
    <bean id="shiroEhcacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache-shiro.xml"/>
    </bean>
     
     <!-- 所有的认证、安全啥的都交给securityManager -->
     <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
     <!--设置自定义realm-->
          <property name="cacheManager" ref="shiroEhcacheManager"/>
          <property name="authenticator" ref="authenticator"></property>
          
          <!-- 在做授权的时候需要在securityManager 中读取realms -->
          
          <!-- 配置多个realm认证   看list可发现这是有顺序的 先加载第一个 -->
          <property name="realms">
            <list>
                <ref bean="shiroAuthorizingRealm"></ref>
                <ref bean="secondRealm"></ref>
            </list>
          </property>
     </bean>
    
     <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator">
     <!--设置自定义realm-->
          <!-- 配置一个realm认证 -->
          <!-- <property name="realm" ref="shiroAuthorizingRealm" /> -->
          <!-- <property name="cacheManager" ref="shiroEhcacheManager"/> -->
          <property name="authenticationStrategy">
            <bean class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean>
          </property>
     </bean>
     
     <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
     
     <!--myRealm 继承自AuthorizingRealm-->
     <bean id="shiroAuthorizingRealm" class="com.demons.shiro.shiro.ShiroAuthorizingRealm" >
        <property name="credentialsMatcher"> 
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="MD5"></property>
                <property name="hashIterations" value="1024"></property>
            </bean>
        </property>
     </bean>
      
     <bean id="secondRealm" class="com.demons.shiro.shiro.SecondRealm" >
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="SHA1"></property>
                <property name="hashIterations" value="1024"></property>
            </bean>
        </property>
     </bean>
 
     <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
          <property name="staticMethod"
               value="org.apache.shiro.SecurityUtils.setSecurityManager" />
          <property name="arguments" ref="securityManager" />
     </bean>
</beans>